#Stephanie Cao
#Andrew ID: kjcao
#Section B

#15-112 Term Project
#Photo Enhancer

"""
This is the main page that will run the program.
This page is responsible for creating the UI
The UI includes buttons and color


Sources:
For the UI: https://sourceforge.net/projects/page/postdownload?source=dlp
! /usr/bin/env python
GUI module generated by PAGE version 4.12
In conjunction with Tcl version 8.6
#https://sourceforge.net/projects/page/postdownload?source=dlp (template for the UI)

I downloaded source code from this website:
https://sourceforge.net/projects/page/files/latest/download
This has samples on how to code canvas,buttons, menu
I also used the codes as color inspiration
"""

import sys


try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import functions

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = New_Toplevel (root)
    functions.init(root, top)
    #functions.timerFiredWrapper(root, top)
    root.mainloop()

w = None
def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = New_Toplevel (w)
    functions.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None

#https://www.rapidtables.com/web/color/RGB_Color.html (RGB Values)
class New_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font12 = "-family Verdana -size 10 -weight bold -slant roman "  \
            "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1200x750+347+157")
        top.title("Photo Enhancer")
        top.configure(background="#d9d9d9")

        #######Menu Bar########
    #File 
        self.menubar = Menu(top,bg='#ff0000',fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.file = Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.file,
                compound="left",
                font=('Purisa',12,'normal','roman',),
                foreground="#000000",
                label="File")
        #Load Image from Computer
        self.file.add_command(
                activeforeground="#000000",
                command=lambda: functions.openClicked(root, self),
                font="TkMenuFont",
                foreground="#000000",
                label="Open File")
        #Load URL
        self.file.add_command(
                activeforeground="#000000",
                command=lambda: functions.importClicked(root, self),
                font="TkMenuFont",
                foreground="#000000",
                label="Load URL")
        self.file.add_separator(
                #background="#ffff00"
                )
        #Save
        self.file.add_command(
                activeforeground="#000000",
                command=lambda: functions.saveClicked(root, self),
                font="TkMenuFont",
                foreground="#000000",
                label="Save")
        #Save As
        self.file.add_command(
                activeforeground="#000000",
                command=lambda: functions.saveasClicked(root, self),
                font="TkMenuFont",
                foreground="#000000",
                label="Save As")
        self.file.add_separator(
                #background="#ffff00"
                )
        #Close Image
        self.file.add_command(
                activeforeground="#000000",
                command=lambda: functions.closeClicked(root, self),
                font="TkMenuFont",
                foreground="#000000",
                label="Close the Image")
        self.file.add_separator(
                #background="#ffff00"
                )
        #Quit the Application
        self.file.add_command(
                activeforeground="#000000",
                #background="#ffff00",
                command=lambda: functions.quitClicked(root, self),
                compound="top",
                font="TkMenuFont",
                foreground="#000000",
                #image=self._img0,
                label="Quit")
    #Edit
        self.edit = Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.edit,
                compound="left",
                font=('Purisa',12,'normal','roman',),
                foreground="#000000",
                state="disabled",
                label="Edit")
        self.edit.add_command(
                activeforeground="#000000",
                command=lambda: functions.rotateClicked(root, self),                
                font="TkMenuFont",
                foreground="#000000",
                label="Rotate")
        self.edit.add_command(
                activeforeground="#000000",
                command=lambda: functions.brightenClicked(root, self),
                font="TkMenuFont",
                foreground="#000000",
                label="Brighten")
        self.edit.add_command(
                activeforeground="#000000",
                command=lambda: functions.contrastClicked(root, self),
                font="TkMenuFont",
                foreground="#000000",
                label="Contrast")
        self.edit.add_command(
                activeforeground="#000000",
                command=lambda: functions.filterClicked(root, self),
                font="TkMenuFont",
                foreground="#000000",
                label="Filter")
        self.edit.add_command(
                activeforeground="#000000",
                command=lambda: functions.mirrorClicked(root, self),
                font="TkMenuFont",
                foreground="#000000",
                label="Mirror")
        self.edit.add_command(
                activeforeground="#000000",
                command=lambda: functions.cropClicked(root, self),
                font="TkMenuFont",
                foreground="#000000",
                label="Crop")
        self.edit.add_command(
                activeforeground="#000000",
                command=lambda: functions.blurClicked(root, self),
                font="TkMenuFont",
                foreground="#000000",
                label="Blur")    
        self.edit.add_command(
                activeforeground="#000000",
                command=lambda: functions.sharpenClicked(root, self),
                font="TkMenuFont",
                foreground="#000000",
                label="Sharpen")
                                        
        self.help = Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.help,
                compound="left",
                font=('Purisa',12,'normal','roman',),
                foreground="#000000",
                label="Help")
        self.help.add_command(
                activeforeground="#000000",
                command=lambda: functions.helpClicked(root, self),
                font="TkMenuFont",
                foreground="#000000",
                label="About")
        #######Buttons#########

        self.TPanedwindow1 = ttk.Panedwindow(top, orient="horizontal")
        self.TPanedwindow1.place(relx=0.02, rely=0.01, relheight=0.96
                , relwidth=0.97)
        self.TPanedwindow1.configure(width=1165)
        self.toolPanel = ttk.Labelframe(width=200, text='')
        self.TPanedwindow1.add(self.toolPanel)
        self.displayPanel = ttk.Labelframe(text='')
        self.TPanedwindow1.add(self.displayPanel)
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)
        
        #Places the Editing Tools Title
        self.toolLabel = ttk.Label(self.toolPanel)
        self.toolLabel.place(relx=0.3, rely=0.07, height=29, width=96, y=-12)
        self.toolLabel.configure(background="#d9d9d9")
        self.toolLabel.configure(foreground="#000000")
        self.toolLabel.configure(font=font12)
        self.toolLabel.configure(relief=FLAT)
        self.toolLabel.configure(justify=CENTER)
        self.toolLabel.configure(text='''Editing Tools''')
        self.toolLabel.configure(width=96)
        
        #Places the Rotate Button
        self.rotateButton = ttk.Button(self.toolPanel)
        self.rotateButton.place(relx=0.26, rely=0.14, height=25, width=90, y=-12)
        self.rotateButton.configure(command=lambda: functions.rotateClicked(root, self))
        self.rotateButton.configure(takefocus="")
        self.rotateButton.configure(text='''Rotate''')
        self.rotateButton.configure(state=DISABLED)
    
        #Clockwise Radio Button
        self.clockwiseRadiobutton = Radiobutton(self.toolPanel)
        self.clockwiseRadiobutton.place(relx=0.16, rely=0.18, relheight=0.03, relwidth=0.52, y=-12, h=12)
        self.clockwiseRadiobutton.configure(activebackground="#d9d9d9")
        self.clockwiseRadiobutton.configure(activeforeground="#000000")
        self.clockwiseRadiobutton.configure(background="#eaeaea")
        self.clockwiseRadiobutton.configure(foreground="#000000")
        self.clockwiseRadiobutton.configure(highlightbackground="#d9d9d9")
        self.clockwiseRadiobutton.configure(highlightcolor="black")
        self.clockwiseRadiobutton.configure(justify=LEFT)
        self.clockwiseRadiobutton.configure(text='''Clockwise''')
        self.clockwiseRadiobutton.configure(variable="rotate")
        self.clockwiseRadiobutton.configure(value="1")
        self.clockwiseRadiobutton.configure(command=lambda: functions.setRotateDirection(1))
        #1 rotates clockwise
        self.clockwiseRadiobutton.configure(state=DISABLED)
        self.clockwiseRadiobutton.select()
        #Counterclockwise Radio Button
        self.counterwiseRadiobutton = Radiobutton(self.toolPanel)
        self.counterwiseRadiobutton.place(relx=0.16, rely=0.22, relheight=0.03, relwidth=0.61, y=-12, h=12)
        self.counterwiseRadiobutton.configure(activebackground="#d9d9d9")
        self.counterwiseRadiobutton.configure(activeforeground="#000000")
        self.counterwiseRadiobutton.configure(background="#eaeaea")
        self.counterwiseRadiobutton.configure(foreground="#000000")
        self.counterwiseRadiobutton.configure(highlightbackground="#d9d9d9")
        self.counterwiseRadiobutton.configure(highlightcolor="black")
        self.counterwiseRadiobutton.configure(justify=LEFT)
        self.counterwiseRadiobutton.configure(text='''Counterwise''')
        self.counterwiseRadiobutton.configure(variable="rotate")
        self.counterwiseRadiobutton.configure(value="-1")
        #-1 rotates counterclockwise
        self.counterwiseRadiobutton.configure(command=lambda: functions.setRotateDirection(-1))
        self.counterwiseRadiobutton.configure(state=DISABLED)
        self.counterwiseRadiobutton.deselect()
        
        #Brightness Button
        self.brightnessButton = ttk.Button(self.toolPanel)
        self.brightnessButton.place(relx=0.26, rely=0.28, height=25, width=90, y=-12)
        self.brightnessButton.configure(command=lambda: functions.brightnessClicked(root, self))
        self.brightnessButton.configure(takefocus="")
        self.brightnessButton.configure(text='''Brighten''')
        self.brightnessButton.configure(state=DISABLED)
        #Brightness Scale
        self.brightScale = ttk.Scale(self.toolPanel)
        self.brightScale.place(relx=0.25, rely=0.31, relwidth=0.5, relheight=0.0, height=26)
        self.brightScale.configure(from_="-255")
        self.brightScale.configure(to="255")
        self.brightScale.configure(value="0")
        #Scale ranges from -255 to 255 & it starts at 0
        self.brightScale.configure(command=lambda x: functions.setBrightness(root, self))
        
        #Contrast Button
        self.contrastButton = ttk.Button(self.toolPanel)
        self.contrastButton.place(relx=0.26, rely=0.38, height=25, width=90, y=-12)
        self.contrastButton.configure(command=lambda: functions.contrastClicked(root, self))        
        self.contrastButton.configure(takefocus="")
        self.contrastButton.configure(text='''Contrast''')
        self.contrastButton.configure(state=DISABLED)
        #Contrast Scale
        self.contrastScale = ttk.Scale(self.toolPanel)
        self.contrastScale.place(relx=0.25, rely=0.42, relwidth=0.5, relheight=0.0, height=26)
        self.contrastScale.configure(takefocus="")
        self.contrastScale.configure(from_="0.0")
        self.contrastScale.configure(to="10.0")
        self.contrastScale.configure(value="5.0")
        #scale ranges from 0 to 10 & starts at 5
        self.contrastScale.configure(command=lambda x: functions.setContrast(root, self))

        #Filter Button
        self.filterButton = ttk.Button(self.toolPanel)
        self.filterButton.place(relx=0.26, rely=0.50, height=25, width=90, y=-12)
        self.filterButton.configure(takefocus="")
        self.filterButton.configure(text='''Filter''')
        self.filterButton.configure(state=DISABLED)
        self.filterButton.configure(command=lambda: functions.filterClicked(root, self))
        #Black and White Button
        self.bw = Radiobutton(self.toolPanel)
        self.bw.place(relx=0.26, rely=0.54, relheight=0.03, relwidth=0.36, y=-12
                , h=12)
        self.bw.configure(activebackground="#d9d9d9")
        self.bw.configure(activeforeground="#000000")
        self.bw.configure(background="#eaeaea")
        self.bw.configure(disabledforeground="#a3a3a3")
        self.bw.configure(foreground="#000000")
        self.bw.configure(highlightbackground="#d9d9d9")
        self.bw.configure(highlightcolor="black")
        self.bw.configure(justify=LEFT)
        self.bw.configure(text='''B&W''')
        self.bw.configure(variable="filter")
        self.bw.configure(value="1")
        self.bw.configure(width=70)
        self.bw.select()
        self.bw.configure(command=lambda: functions.setFilterOptions((1,1,1)))
        self.bw.configure(state=DISABLED)
        #Blue Filter
        self.red = Radiobutton(self.toolPanel)
        self.red.place(relx=0.26, rely=0.58, relheight=0.03, relwidth=0.36, y=-12
                , h=12)
        self.red.configure(activebackground="#d9d9d9")
        self.red.configure(activeforeground="#000000")
        self.red.configure(background="#eaeaea")
        self.red.configure(disabledforeground="#a3a3a3")
        self.red.configure(foreground="#000000")
        self.red.configure(highlightbackground="#d9d9d9")
        self.red.configure(highlightcolor="black")
        self.red.configure(justify=LEFT)
        self.red.configure(text='''Blue''')
        self.red.configure(variable="filter")
        self.red.configure(value="2")
        self.red.configure(width=70)
        self.red.deselect()
        self.red.configure(command=lambda: functions.setFilterOptions((0,1,1)))
        self.red.configure(state=DISABLED)
        #Green Filter
        self.blue = Radiobutton(self.toolPanel)
        self.blue.place(relx=0.26, rely=0.62, relheight=0.03, relwidth=0.38
                , y=-12, h=12)
        self.blue.configure(activebackground="#d9d9d9")
        self.blue.configure(activeforeground="#000000")
        self.blue.configure(background="#eaeaea")
        self.blue.configure(disabledforeground="#a3a3a3")
        self.blue.configure(foreground="#000000")
        self.blue.configure(highlightbackground="#d9d9d9")
        self.blue.configure(highlightcolor="black")
        self.blue.configure(justify=LEFT)
        self.blue.configure(text='''Green''')
        self.blue.configure(variable="filter")
        self.blue.configure(value="3")
        self.blue.configure(width=70)
        self.blue.deselect()
        self.blue.configure(command=lambda: functions.setFilterOptions((1,1,0)))
        self.blue.configure(state=DISABLED)
        #Red Filter
        self.green = Radiobutton(self.toolPanel)
        self.green.place(relx=0.26, rely=0.66, relheight=0.03, relwidth=0.36
                , y=-12, h=12)
        self.green.configure(activebackground="#d9d9d9")
        self.green.configure(activeforeground="#000000")
        self.green.configure(background="#eaeaea")
        self.green.configure(disabledforeground="#a3a3a3")
        self.green.configure(foreground="#000000")
        self.green.configure(highlightbackground="#d9d9d9")
        self.green.configure(highlightcolor="black")
        self.green.configure(justify=LEFT)
        self.green.configure(text='''Red''')
        self.green.configure(variable="filter")
        self.green.configure(value="4")
        self.green.configure(width=70)
        self.green.deselect()
        self.green.configure(command=lambda: functions.setFilterOptions((1,0,1)))
        self.green.configure(state=DISABLED)

        #Mirror Button
        self.mirrorButton = ttk.Button(self.toolPanel)
        self.mirrorButton.place(relx=0.26, rely=0.71, height=25, width=90, y=-12)
        self.mirrorButton.configure(takefocus="")
        self.mirrorButton.configure(text='''Mirror''')
        self.mirrorButton.configure(command=lambda: functions.mirrorClicked(root, self))
        self.mirrorButton.configure(state=DISABLED)

        #Crop Button
        self.cropButton = ttk.Button(self.toolPanel)
        self.cropButton.place(relx=0.26, rely=0.77, height=25, width=90, y=-12)
        self.cropButton.configure(takefocus="")
        self.cropButton.configure(text='''Crop''')
        self.cropButton.configure(command=functions.cropClicked)
        self.cropButton.configure(state=DISABLED)

        #Blur Button
        self.blurButton = ttk.Button(self.toolPanel)
        self.blurButton.place(relx=0.26, rely=0.83, height=25, width=90, y=-12)
        self.blurButton.configure(takefocus="")
        self.blurButton.configure(text='''Blur''')
        self.blurButton.configure(command=lambda: functions.blurClicked(root, self))
        self.blurButton.configure(state=DISABLED)

        #Sharpen Button
        self.sharpenButton = ttk.Button(self.toolPanel)
        self.sharpenButton.place(relx=0.26, rely=0.89, height=25, width=90, y=-12)
        self.sharpenButton.configure(takefocus="")
        self.sharpenButton.configure(text='''Sharpen''')
        self.sharpenButton.configure(command=lambda: functions.sharpenClicked(root, self))
        self.sharpenButton.configure(state=DISABLED)

        #Draws the canvas for the image display
        self.imgCanvas = Canvas(self.displayPanel)
        self.imgCanvas.place(relx=0.0, rely=0.01, relheight=0.90, relwidth=0.99, y=-12, h=12)
        self.imgCanvas.configure(background="#d9d9d9")
        self.imgCanvas.configure(borderwidth="2")
        self.imgCanvas.configure(insertbackground="black")
        self.imgCanvas.configure(relief=RIDGE)
        self.imgCanvas.configure(selectbackground="#c4c4c4")
        self.imgCanvas.configure(selectforeground="black")
        self.imgCanvas.configure(width=955)
        

        root.bind("<Button-1>", lambda event:
                            functions.mousePressedWrapper(event, root, self))
        root.bind("<B1-Motion>", lambda event:
                            functions.mouseMovedWrapper(event, root, self)) 
        root.bind("<ButtonRelease-1>", lambda event:
                            functions.mouseReleasedWrapper(event, root, self))                                         
                   
        #Displays the image label for URL bar
        self.fileLabel = Label(self.displayPanel)
        self.fileLabel.place(relx=0.02, rely=0.95, height=27, width=60, y=-12)

        self.fileLabel.configure(background="#eaeaea")
        self.fileLabel.configure(disabledforeground="#a3a3a3")

        self.fileLabel.configure(foreground="#000000")
        self.fileLabel.configure(text='''Image:''')

        #White space to enter URL
        self.imageEntry = Entry(self.displayPanel)
        self.imageEntry.place(relx=0.09, rely=0.94,height=30, relwidth=0.75)
        self.imageEntry.configure(background="white")
        self.imageEntry.configure(disabledforeground="#a3a3a3")
        self.imageEntry.configure(font="TkFixedFont")
        self.imageEntry.configure(foreground="#000000")
        self.imageEntry.configure(insertbackground="black")
        READONLY = 'readonly'
        self.imageEntry.configure(state=READONLY)
        self.imageEntry.configure(width=694)

        #Button to load the URL
        self.loadButton = Button(self.displayPanel)
        self.loadButton.place(relx=0.85, rely=0.96, height=24, width=100, y=-12)
        self.loadButton.configure(activebackground="#d9d9d9")
        self.loadButton.configure(activeforeground="#000000")
        self.loadButton.configure(background="#d9d9d9")
        self.loadButton.configure(disabledforeground="#a3a3a3")
        self.loadButton.configure(foreground="#000000")
        self.loadButton.configure(highlightbackground="#d9d9d9")
        self.loadButton.configure(highlightcolor="black")
        self.loadButton.configure(pady="0")
        self.loadButton.configure(state=DISABLED)
        self.loadButton.configure(text='''Load Image''')
        self.loadButton.configure(command=lambda: functions.openURL(root, self))

    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [165, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0





if __name__ == '__main__':
    vp_start_gui()
