"""
Stephanie Cao
kjcao
Section B
This file contains all my image editing functions/algorithms.
"""


#These sources are general sources (no algorithm/used throughout)
#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.12
# In conjunction with Tcl version 8.6
#    Apr 24, 2018 10:45:15 AM
#https://pillow.readthedocs.io/en/5.1.x/
#https://en.wikipedia.org/wiki/RGB_color_model
#https://stackoverflow.com/questions/16046743/how-to-change-tkinter-button-state-from-disabled-to-normal
#https://helpful.knobs-dials.com/index.php/Python_usage_notes_-_PIL
#https://docs.python.org/3/library/math.html

import sys
import math


try:
    from Tkinter import *
except ImportError:
    from tkinter import *
      

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from tkinter import filedialog
from PIL import Image, ImageTk
from PIL import ImageGrab
import base64
from urllib.request import urlopen
from io import BytesIO 
import os.path
from tkinter import font  as tkfont


class Struct(object): pass
data = Struct()

##Mouse Controls for cropping & moving image
#https://www.cs.cmu.edu/~112/notes/notes-animations-part2.html
def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    data.imagename = ""
    data.filterColor = (1,1,1) #starts off as b&w
    data.rotateDirection = 1
    data.brightenScale = 0 #start at 0 
    data.contrastScale = 1
    data.x0 = 0 #upper left (x0,y0) = (0,0) pixel FOR IMAGE POSITION
    data.y0 = 0
    data.x1 = 0 #upper left for mouse drag
    data.y1 = 0
    data.x2 = 1000 #bottom right for mouse drag (arbitrarily set to screen size)
    data.y2 = 700
    data.doCrop = 0 #0 means didn't click crop; 1 means clicked crop
    data.inAction = 0 #if clicked w/ mouse, will change to 1
    data.imgWidth = 0
    data.imgHight = 0
    data.timerDelay = 200 #draws every 200 milliseconds

def destroy_window():
    # Closes the window.
    global top_level
    top_level.destroy()
    top_level = None

#https://docs.python.org/3/library/functions.html#hasattr
def timerFiredWrapper(root, window):
    if not data is None:
        if hasattr(data, 'doCrop'):
            if data.doCrop == 1:
                timerFired(root, window)
    if hasattr(window, 'imgCanvas'):
        window.imgCanvas.after(data.timerDelay, timerFiredWrapper, root, window)
    
def timerFired(root, window):
    displayMessage(root, window, "HI")    
        
def mousePressedWrapper(event, root, window):
    mouseX = event.x
    mouseY = event.y
    mousePressed(event, root, window)

#Takes the initial mouse position        
def mousePressed(event, root, window):
    if data.imagename != "": #validates that there is an image
        data.x1 = event.x #initial mouse press
        data.y1 = event.y
        data.inAction = 1 #When clicked
    
def mouseMovedWrapper(event, root, window):
    #Make sure that it's in action 1st (pressed) & clicked cropped button
    if data.inAction == 1 and data.doCrop == 1:    
        window.imgCanvas.after(data.timerDelay) 
        #every 200 milliseconds, will clear the original img, redraw image
        #B/c keep changing the rectangle
        mouseMoved(event, root, window)

#Only for drawing crop rectangle        
def mouseMoved(event, root, window):
    x1 = data.x1 #where the user first clicked x1,y1
    y1 = data.y1
    x2 = event.x #position of mouse currently moving
    y2 = event.y
    if data.imagename != "": #make sure there's an image
        if x1 > x2:
            tmpX = x1 #create a temp variable to help switch variables
            x1 = x2
            x2 = tmpX
        if y1 > y2:
            tmpY = y1
            y1 = y2
            y2 = tmpY
    #Now draw rectangle time!
    try:
        window.imgCanvas.delete("all") #clear all on canvas
        imageDisplay = ImageTk.PhotoImage(data.editingImg) #recreate image
        data.imgWidth = imageDisplay.width()
        data.imgHight = imageDisplay.height()
        #Image position starts at (0,0) aka data.xo and data.y0
        window.imgCanvas.create_image(data.x0, data.y0, image = imageDisplay, anchor = NW)
        #Draw the cropped area rectangle:
        window.imgCanvas.create_rectangle(x1, y1, x2, y2, outline='red', width =3)
        root.mainloop()
    except: #error message
        window.imgCanvas.delete("all")
        window.imgCanvas.create_text(500,250,fill="red",font="Times 30  bold", text="Cannot display image!")
        enableEdit(window, 0)           
    
def mouseReleasedWrapper(event, root, window):
    mouseX = event.x
    mouseY = event.y
    mouseReleased(event, root, window)
    data.inAction = 0  #sets back to unclicked

#Either move image or crop image
def mouseReleased(event, root, window):
    data.x2 = event.x
    data.y2 = event.y
    if data.imagename != "" and data.inAction == 1: #inAction =1 means mouse drag
        #Not cropping
        if data.doCrop == 0:
            #Clicked & move image
            dx = data.x2 - data.x1 #moved x distance
            dy = data.y2 - data.y1 #moved y distance
            data.x0 += dx
            data.y0 += dy
            window.imgCanvas.delete("all")
            imageDisplay = ImageTk.PhotoImage(data.editingImg)
            window.imgCanvas.create_image(data.x0, data.y0, image = imageDisplay, anchor = NW)
            root.mainloop()
        else: #Clicked crop button
        #If user doesn't draw rectangle from top left to bottom right,
        #I always want data.x1 & y1 to be the top left, so need to convert
            if data.x1 > data.x2:
                tmpX = data.x1
                data.x1 = data.x2
                data.x2 = tmpX
            if data.y1 > data.y2:
                tmpY = data.y1
                data.y1 = data.y2
                data.y2 = tmpY
            #Draw the cropped area rectangle:
            window.imgCanvas.create_rectangle(data.x1, data.y1, data.x2, data.y2, outline='red', width =3)
            createNewEditImage() #creates the new cropped image w/ new dimensions
            #reset
            data.doCrop = 0
    data.inAction = 0
    
#Create a new image after cropping
def createNewEditImage():
    orgpixels = data.editingImg.load()
    #Get dimensions:
    newWidth = abs(data.x2 - data.x1)
    newHight = abs(data.y2 - data.y1) 
    #Create a new image w/ dimensions:
    new = Image.new("RGB",(newWidth, newHight))
    newpixels = new.load()
    for x in range(newWidth):
        for y in range(newHight):
            if x-data.x0+data.x1 > data.imgWidth-1 or x-data.x0+data.x1 < 0 \
            or y-data.y0+data.y1 > data.imgHight-1 or y-data.y0+data.y1 < 0:
                newpixels[x, y] = (255, 255, 255)
            else:
                newpixels[x, y] = orgpixels[x-data.x0+data.x1, y-data.y0+data.y1]
    data.editingImg = new  
    data.x0 = data.x1 #set new top left position to inital mouse click pos.
    data.y0 = data.y1 
    data.imgWidth = newWidth
    data.imgHight = newHight
              
###Menu functions:

#https://www.reddit.com/r/learnpython/comments/3loul5/only_showing_certain_filetypes_in_filedialog/
#https://lists.gt.net/python/python/65573
#Allows user to open an image file from his/her computer (only allow certain types of files)
def openClicked(root, window):
    data.imagename =  filedialog.askopenfilename(title = "Select file",filetypes = \
    (("gif files","*.gif"),("jpeg files","*.jpg"),("png files","*.png"),("all files","*.*")))
    try:
        data.original = Image.open(data.imagename)
        data.editingImg = Image.open(data.imagename) #create a copy
        #Set newly uploaded image to 0,0
        data.x0 = 0
        data.y0 = 0
        #Haven't clicked mouse and haven't dragged
        data.x1 = 0
        data.y1 = 0
        data.x2 = 0
        data.y2 = 0                
        enableEdit(window, 1) #activates buttons to edit
        displayImage(root, window)
    except:
        window.imgCanvas.delete("all")
        window.imgCanvas.create_text(500,250,fill="red",font="Times 30 bold", text="Cannot open image!")
        enableEdit(window, 0)#no button activation

def importClicked(root, window):
    enableEdit(window, 0)
    window.imageEntry.config(state=NORMAL)
    window.loadButton.config(state=NORMAL)

#Allows user to save the already saved image
def saveClicked(root, window):
    try:
        data.editingImg.save(data.imagename)
    except:
        window.imgCanvas.delete("all")
        window.imgCanvas.create_text(500,250,fill="red",font="Times 30 bold", text="Cannot save image as file!")
        enableEdit(window, 0)

#https://docs.python.org/3/library/os.html
#Allows user to save as
def saveasClicked(root, window):
    try:
        fileExtention = os.path.splitext(data.imagename)[1][1:]
        data.imagename =  filedialog.asksaveasfilename(title = "Save file as", defaultextension=fileExtention)
        data.editingImg.save(data.imagename)
        data.original = Image.open(data.imagename)
        data.editingImg = Image.open(data.imagename)
        enableEdit(window, 1)
        displayImage(root, window)
    except:
        window.imgCanvas.delete("all")
        window.imgCanvas.create_text(500,250,fill="red",font="Times 30 bold", text="Cannot save image as file!")
        enableEdit(window, 0)

def editClicked():
    pass

#Allows user to close the image
def closeClicked(root, window):
    #Reset all the values back to initial
    data.editingImg = "" #image is gone
    data.imagename = ""
    data.x0 = 0 #upper left (x0,y0) = (0,0) pixel FOR IMAGE POSITION
    data.y0 = 0
    data.x1 = 0 #upper left for mouse drag
    data.y1 = 0
    data.x2 = 1000 #bottom right for mouse drag (arbitrarily set to screen size)
    data.y2 = 700
    data.doCrop = 0 #0 means didn't click crop; 1 means clicked crop
    data.inAction = 0 #if clicked w/ mouse, will change to 1
    data.imgWidth = 0
    data.imgHight = 0
    enableEdit(window, 0) #disable buttons
    displayMessage(root, window, "") #display nothing

def helpClicked(root, window):
    enableEdit(window, 0)
    help = """Welcome to Photo Enhancer! \nTo get started, select an image from your Computer or enter a URL.
Embellishing Tools:
    To move image: click & drag image
    To rotate: Check 'Clockwise' or 'Counterclockwise' and hit 'Rotate'
    To adjust brightness: Scroll the bar left to decrease brightness & scroll right to increase brightness. 
        Then, click 'Brightness'
    To adjust contrast: Scroll the bar left to decrease contrast & scroll  right to increase contrast. 
        Then, click 'Contrast'
    To add filter: Check the particular filter and click 'Filter'
    To mirror: click the 'Mirror' to reflect horizontally
    To crop: click 'Crop', then select a rectangle with your mouse & click inside the rectangle
    To blur: click 'Blur'
    To sharpen, click 'Sharpen' """
    displayMessage(root, window, help)    

#https://docs.python.org/3/library/os.html
def quitClicked(root, window):
    data.editingImg = "" #no longer an image to edit
    data.inAction = 0
    enableEdit(window, 0) #deactivates window buttons
    sys.exit()
    sys.stdout.flush()

#http://effbot.org/tkinterbook/button.htm
#Activates all the buttons when there's an image
def enableEdit(window, control):
    if control == 1: #Activates buttons
        window.menubar.entryconfig("Edit", state=NORMAL)
        window.rotateButton.config(state=NORMAL)
        window.brightnessButton.config(state=NORMAL)
        window.contrastButton.config(state=NORMAL)
        window.filterButton.config(state=NORMAL)
        window.mirrorButton.config(state=NORMAL)
        window.cropButton.config(state=NORMAL)
        window.blurButton.config(state=NORMAL)
        window.sharpenButton.config(state=NORMAL)
        window.clockwiseRadiobutton.config(state=NORMAL)
        window.counterwiseRadiobutton.config(state=NORMAL)
        window.bw.config(state=NORMAL)
        window.red.config(state=NORMAL)
        window.blue.config(state=NORMAL)
        window.green.config(state=NORMAL)
    else: #deactivates buttons
        window.menubar.entryconfig("Edit", state=DISABLED)
        window.rotateButton.config(state=DISABLED)
        window.brightnessButton.config(state=DISABLED)
        window.contrastButton.config(state=DISABLED)
        window.filterButton.config(state=DISABLED)
        window.mirrorButton.config(state=DISABLED)
        window.cropButton.config(state=DISABLED)
        window.blurButton.config(state=DISABLED)
        window.sharpenButton.config(state=DISABLED)
        window.clockwiseRadiobutton.config(state=DISABLED)
        window.counterwiseRadiobutton.config(state=DISABLED)
        window.bw.config(state=DISABLED)
        window.red.config(state=DISABLED)
        window.blue.config(state=DISABLED)
        window.green.config(state=DISABLED)

#Display the image onto the screen
def displayImage(root, window):
    window.imgCanvas.delete("all")
    try:
        imageDisplay = ImageTk.PhotoImage(data.editingImg)
        data.imgWidth = imageDisplay.width()
        data.imgHight = imageDisplay.height()
        #Image position starts at (0,0) aka data.xo and data.y0
        window.imgCanvas.create_image(data.x0, data.y0, image = imageDisplay, anchor = NW) 
        window.imageEntry.delete(0, END)
        window.imageEntry.insert(0, data.imagename)
        window.imageEntry.config(state=DISABLED)
        window.loadButton.config(state=DISABLED)
    except: #error message
        window.imgCanvas.delete("all")
        window.imgCanvas.create_text(500,250,fill="red",font="Times 30  bold", text="Cannot open image!")
        enableEdit(window, 0)
    root.mainloop()

def displayMessage(root, window, message):
    window.imgCanvas.delete("all")
    window.imgCanvas.create_text(500,250,fill="darkblue",font="Times 20 italic bold", text=message)        
    root.mainloop()

#https://pythonprogramming.net/urllib-tutorial-python-3/
#https://stackoverflow.com/questions/8286352/how-to-save-an-image-locally-using-python-whose-url-address-i-already-know
def openURL(root, window):
    window.imgCanvas.delete("all")
    window.imageEntry.config(state=DISABLED)
    window.loadButton.config(state=DISABLED)
    #Use url below for a sample:
    #image_url = "http://p1cdn4static.sharpschool.com/userfiles/servers/server_3592819/image/2016webbanners/banner_dnmarch232018.jpg" 
    image_url = window.imageEntry.get()
    try:
        #Sets image position to (0,0)
        data.dx = 0
        data.dy = 0
        #No mouse clicks yet
        data.x1 = 0
        data.y1 = 0
        data.x2 = 0
        data.y2 = 0          
        image_byt = urlopen(image_url).read()
        im = Image.open(BytesIO(image_byt))
        data.original = im
        data.editingImg = im
        data.imagename = image_url
        photo = ImageTk.PhotoImage(data.editingImg)
        data.imgWidth = photo.width()
        data.imgHight = photo.height()        
        window.imgCanvas.create_image(0, 0, image = photo, anchor = NW)
        enableEdit(window, 1)
    except:
        window.imgCanvas.delete("all")
        window.imgCanvas.create_text(500,250,fill="red",font="Times 30 bold", text="Cannot load the image from web!")
        enableEdit(window, 0)
    root.mainloop()

######IMAGE EDITING FUNCTIONS########

##Filter
def setFilterOptions(color):
    data.filterColor = color

#Applies the 4 different filters
def filterClicked(root, window):
    orgpixels = data.editingImg.load()
    new = Image.new("RGB",data.editingImg.size)
    newpixels = new.load()
    #Black & White
    if data.filterColor[0] == 1 and data.filterColor[1] == 1 and data.filterColor[2] == 1:
        for x in range(data.editingImg.size[0]):
            for y in range(data.editingImg.size[1]):
                avgVal = int((orgpixels[x, y][0] + orgpixels[x, y][1] + orgpixels[x, y][2])/3)
                pixel = (avgVal, avgVal, avgVal) 
                newpixels[x, y] = pixel 
    else:
    #The rest of the filters are just playing with the rgb values
        redFilter = data.filterColor[0]
        greenFilter = data.filterColor[1]
        blueFilter = data.filterColor[2]
        for x in range(data.editingImg.size[0]):
            for y in range(data.editingImg.size[1]):
                pixel = (orgpixels[x, y][0] * redFilter, orgpixels[x, y][1] * greenFilter, orgpixels[x, y][2] * blueFilter) 
                newpixels[x, y] = pixel
    data.editingImg = new
    imageDisplay = ImageTk.PhotoImage(data.editingImg)
    displayImage(root, window)

##Mirror
#Flips image across its y axis
def mirrorClicked(root, window):
    orgpixels = data.editingImg.load()
    new = Image.new("RGB",data.editingImg.size)
    newpixels = new.load()
    for x in range(data.editingImg.size[0]):
        flipped_x = data.editingImg.size[0] - x - 1
        for y in range(data.editingImg.size[1]):
            pixel=orgpixels[x, y]
            newpixels[flipped_x, y] = pixel
    data.editingImg = new
    imageDisplay = ImageTk.PhotoImage(data.editingImg)
    displayImage(root, window)

##Cropped
#When the crop button is clicked
def cropClicked():
    data.doCrop = 1
    data.inAction = 0

##Blur
#http://amritamaz.net/blog/understanding-box-blur
#https://en.wikipedia.org/wiki/Gaussian_blur
#https://computergraphics.stackexchange.com/questions/39/how-is-gaussian-blur-implemented
#http://machinelearninguru.com/computer_vision/basics/convolution/image_convolution_1.html
#http://color.psych.upenn.edu/depreference/depreference.pdf
#Blurs the image
def blurClicked(root, window):
    orgpixels = data.editingImg.load()
    #Create a copy that is used to find the middle pixel
    middle = Image.new("RGB",(data.editingImg.size[0]+2, data.editingImg.size[1]+2))
    #Add 2 b/c need to create a border around 
    middlepixels = middle.load()
    new = Image.new("RGB",data.editingImg.size)
    newpixels = new.load()
    #Don't start in the at the edge b/c that's the border
    for x in range(data.editingImg.size[0]):
        for y in range(data.editingImg.size[1]):
            pixel=orgpixels[x, y]
            midX = x + 1
            midY = y + 1
            middlepixels[midX, midY] = pixel
    #Gets the 8 surrounding RGB values of every pixel & averages them
    for x in range(1, data.editingImg.size[0]+1):
        for y in range(1, data.editingImg.size[1]+1):
            newX = x - 1 #since i started 1 ahead, i need to go back 1
            newY = y - 1
            #R value in (R,G,B)
            sum = middlepixels[x-1,y-1][0] + middlepixels[x,y-1][0] + middlepixels[x+1,y-1][0] \
            + middlepixels[x-1,y][0] + middlepixels[x,y][0] + middlepixels[x+1,y][0] \
            + middlepixels[x-1,y+1][0] + middlepixels[x,y+1][0] + middlepixels[x+1,y+1][0]
            new0 = int(sum/9) #avg the r values
            #G value in (R,G,B)
            sum = middlepixels[x-1,y-1][1] + middlepixels[x,y-1][1] + middlepixels[x+1,y-1][1] \
            + middlepixels[x-1,y][1] + middlepixels[x,y][1] + middlepixels[x+1,y][1] \
            + middlepixels[x-1,y+1][1] + middlepixels[x,y+1][1] + middlepixels[x+1,y+1][1]
            new1 = int(sum/9) #avg the g values
            #B value in (R,G,B)
            sum = middlepixels[x-1,y-1][2] + middlepixels[x,y-1][2] + middlepixels[x+1,y-1][2] \
            + middlepixels[x-1,y][2] + middlepixels[x,y][2] + middlepixels[x+1,y][2] \
            + middlepixels[x-1,y+1][2] + middlepixels[x,y+1][2] + middlepixels[x+1,y+1][2]
            new2 = int(sum/9) #avg the b values
            newpixels[newX, newY] = (new0,new1,new2) #sets to new
    data.editingImg = new
    imageDisplay = ImageTk.PhotoImage(data.editingImg)
    displayImage(root, window)

##Sharpen
#http://northstar-www.dartmouth.edu/doc/idl/html_6.2/Sharpening_an_Image.html
#http://www.nptel.ac.in/courses/117104069/chapter_8/8_32.html
#http://color.psych.upenn.edu/depreference/depreference.pdf
def sharpenClicked(root, window):
    orgpixels = data.editingImg.load()
    #Create a copy that is used to find the middle pixel
    middle = Image.new("RGB",(data.editingImg.size[0]+2, data.editingImg.size[1]+2))
    middlepixels = middle.load()
    new = Image.new("RGB",data.editingImg.size)
    newpixels = new.load()
    for x in range(data.editingImg.size[0]):
        for y in range(data.editingImg.size[1]):
            pixel=orgpixels[x, y]
            midX = x + 1
            midY = y + 1
            middlepixels[midX, midY] = pixel
    for x in range(1, data.editingImg.size[0]+1):
        for y in range(1, data.editingImg.size[1]+1):
            newX = x - 1
            newY = y - 1
            #Gets the r greatest difference between the 4 neighboring pixels
            diff = getGreatestDiff(middlepixels[x,y][0], middlepixels[x,y-1][0], \
            middlepixels[x-1,y][0], middlepixels[x+1,y][0],middlepixels[x,y+1][0]) 
            #New r value
            new0 = middlepixels[x,y][0] + diff * 2  #sharpen by 2
            #Makes sure that values are within r,g,b values of 255
            if new0 > 255:
                new0 = 255
            if new0 < 0:
                new0 = 0
            #Gets the g greatest difference between the 4 neighboring pixels
            diff = getGreatestDiff(middlepixels[x,y][1], middlepixels[x,y-1][1],\
             middlepixels[x-1,y][1], middlepixels[x+1,y][1], middlepixels[x,y+1][1]) 
            #New g value
            new1 = middlepixels[x,y][1] + diff * 2  #sharpen by 2
            if new1 > 255:
                new1 = 255
            if new1 < 0:
                new1 = 0
            #Gets the g greatest difference between the 4 neighboring pixels
            diff = getGreatestDiff(middlepixels[x,y][2], middlepixels[x,y-1][2], \
            middlepixels[x-1,y][2], middlepixels[x+1,y][2], middlepixels[x,y+1][2]) 
            #New b value
            new2 = middlepixels[x,y][2] + diff * 2  #sharpen by 2
            if new2 > 255:
                new2 = 255
            if new2 < 0:
                new2 = 0
            newpixels[newX, newY] = (new0,new1,new2) #sets new
    data.editingImg = new
    imageDisplay = ImageTk.PhotoImage(data.editingImg)
    displayImage(root, window)

#Takes the pixel & its 4 neighbors & gets their greatest r,g,b difference
def getGreatestDiff(center, up, left, right, down):
    diffUp = center - up
    diffLeft = center - left
    diffRight = center - right
    diffDown = center - down
    maxAbsVal = diffUp #arbitrarily set as largest for now
    if math.fabs(diffLeft) > math.fabs(maxAbsVal):
        maxAbsVal = diffLeft
    if math.fabs(diffRight) > math.fabs(maxAbsVal):
        maxAbsVal = diffRight
    if math.fabs(diffDown) > math.fabs(maxAbsVal):
        maxAbsVal = diffDown
    return maxAbsVal

##Rotate
def setRotateDirection(direction):
    data.rotateDirection = direction

#Similar concept as my tetris (colab6) code although not exact
def rotateClicked(root, window):
    orgpixels = data.editingImg.load()
    width, height = data.editingImg.size
    new = Image.new("RGB", (height,width)) #create temporary 'new' image
    newpixels = new.load()
    #adjustVal = data.brightenScale
    if data.rotateDirection == 1:
        for x in range(height):
            for y in range(width):
                newpixels[x,y] = orgpixels[y,height-1-x]
    else:
        for x in range(height):
            for y in range(width):
                newpixels[x,y] = orgpixels[width-1-y,x]
    data.editingImg = new
    imageDisplay = ImageTk.PhotoImage(data.editingImg)
    displayImage(root, window)

##Brightness
#https://stackoverflow.com/questions/14508727/how-to-get-value-out-from-the-tkinter-slider-scale
#Stores the value from the scale
def setBrightness(root, window):
    data.brightenScale = int(window.brightScale.get())
    data.inAction = 0

#http://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-4-brightness-adjustment/    
def brightnessClicked(root, window):
    orgpixels = data.editingImg.load()
    new = Image.new("RGB",data.editingImg.size)
    newpixels = new.load()
    adjustVal = data.brightenScale #takes the value from the scale
    for x in range(data.editingImg.size[0]):
        for y in range(data.editingImg.size[1]):
            #Brightness adjusting formula:
            new0 = orgpixels[x,y][0] + adjustVal
            #makes sure that rgb values are within 0 to 255
            if new0 > 255:
                new0 = 255
            if new0 < 0:
                new0 = 0
            new1 = orgpixels[x,y][1] + adjustVal
            if new1 > 255:
                new1 = 255
            if new1 < 0:
                new1 = 0
            new2 = orgpixels[x,y][2] + adjustVal
            if new2 > 255:
                new2 = 255
            if new2 < 0:
                new2 = 0
            newpixels[x, y] = (new0,new1,new2)
    data.editingImg = new
    imageDisplay = ImageTk.PhotoImage(data.editingImg)
    displayImage(root, window)

##Contrast    
#Sets the value from the contrast scale
def setContrast(root, window):
    data.contrastScale = window.contrastScale.get()/10
    data.inAction = 0

#http://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-5-contrast-adjustment/    
def contrastClicked(root, window):
    orgpixels = data.editingImg.load()
    new = Image.new("RGB",data.editingImg.size)
    newpixels = new.load()
    adjustVal = data.contrastScale #gets the value from scale
    for x in range(data.editingImg.size[0]):
        for y in range(data.editingImg.size[1]):
            #Contrast adjusting formula:
            new0 = int((orgpixels[x,y][0] - 128) * adjustVal + 128)
            #makes sure rgb values are within 0 to 255
            if new0 > 255:
                new0 = 255
            if new0 < 0:
                new0 = 0
            new1 = int((orgpixels[x,y][1] - 128) * adjustVal + 128)
            if new1 > 255:
                new1 = 255
            if new1 < 0:
                new1 = 0
            new2 = int((orgpixels[x,y][2] - 128) * adjustVal + 128)
            if new2 > 255:
                new2 = 255
            if new2 < 0:
                new2 = 0
            newpixels[x, y] = (new0,new1,new2)
    data.editingImg = new
    imageDisplay = ImageTk.PhotoImage(data.editingImg)
    displayImage(root, window)
            
#########       

if __name__ == '__main__':
    import mainPage
    mainPage.vp_start_gui()


